---
layout: post
title: "Иногда комментарии только во вред!"
date: 2013-05-30 15:13
comments: true
categories:
- js
- v8
---

Комментировать код, конечно, полезно.
Но иногда это приводит к неожиданным результатам.

Например, сравним две функции:

{: .language-javascript }
    function add1(x, y) {
        return x + y;
    }

    function add2(x, y) {
        /*
            ...
            Очень длинный комментарий...
            ...
        */
        return x + y;
    }

Они ничем не отличаются, кроме комментария.
Большинство js-программистов привыкло, что пробелы и комментарии
ни на что не влияют. Но это не так.

В `v8` есть ограничение на размер функции, которая может быть заинлайнена:

{: .language-c }
    DEFINE_int(max_inlined_source_size, 600,
        "maximum source size in bytes considered for a single inlining")

При этом считается размер функции в исходном тексте, так что комментарии тоже учитываются.
Т.е. слишком развесистые комментарии могут замедлить выполнение программы!

Можно посмотреть вот такой [пример](https://gist.github.com/pasaran/5677234).
Там вычисляется некое выражение — `(x + 1) * (x - 1)` — тремя способами.
Первый — при помощи нескольких вспомогательных функций, второй — тоже самое, но
в эти функции добавлены длинные комментарии. И третий — выражение вычисляется как есть,
без каких-либо функций.

Результаты примерно такие:

{: .language-sh }
    $ node long-comments-are-bad.js

    func w/o comments: 247ms
    func w/ long comments: 813ms
    expression: 242ms

В первом варианте (в котором функции мелкие и они инлайнятся) результат практически
такой же, как и просто в выражении. Т.е. дополнительные функции не дают никакого оверхеда.
А второй вариант (с комментариями) в три с лишним раза медленнее.

Пример, конечно, синтетический, но тем не менее.

Выводы такие: код нужно обфусцировать всегда.
Все давным давно делают это для javascript'а, который выполняется в браузере.
Но, неплохо бы делать это и для серверного кода, который выполняется в `node.js`.

Интересный момент. Этот же [тест](http://jsperf.com/long-comments) на jsperf.com дает другие результаты в Хроме.
Первый и второй вариант идентичны.
Можно предположить, что обертка, которую добавляет jsperf.com выключает какие-то образом оптимизацию в `v8`.
Скорее всего, код завернут в `try-catch` или что-то подобное.
Т.е. нужно с большой осторожностью делать тесты кода, который должен быть прооптимизирован js-движком.

